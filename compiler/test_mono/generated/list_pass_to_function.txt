procedure List.3 (List.63, List.64, List.65):
    let List.140 : {List I64, I64} = CallByName List.57 List.63 List.64 List.65;
    let List.139 : List I64 = StructAtIndex 0 List.140;
    inc List.139;
    dec List.140;
    ret List.139;

procedure List.57 (#Attr.2, #Attr.3, #Attr.4):
    let List.145 : U64 = lowlevel ListLen #Attr.2;
    let List.143 : Int1 = lowlevel NumLt #Attr.3 List.145;
    if List.143 then
        let List.144 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret List.144;
    else
        let List.142 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret List.142;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
